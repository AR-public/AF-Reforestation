mydata$edctn_n=as.numeric(mydata$edctn_n)
mydata$edctn_n=ifelse(is.na(mydata$edctn_n), mean(mydata$edctn_n,na.rm=T), mydata$edctn_n)
mydata$edctn_n[mydata$edctn_n<4 & mydata$rfrsttn_ch==1] <- 'na'
mydata$edctn_n=as.numeric(mydata$edctn_n)
mydata$edctn_n=ifelse(is.na(mydata$edctn_n), mean(mydata$edctn_n,na.rm=T), mydata$edctn_n)
mydata$edctn_n[mydata$edctn_n>22 & mydata$rfrsttn_ch==0] <- 'na'
mydata$edctn_n=as.numeric(mydata$edctn_n)
mydata$edctn_n=ifelse(is.na(mydata$edctn_n), mean(mydata$edctn_n,na.rm=T), mydata$edctn_n)
mydata$edctn_n[mydata$edctn_n<3.2 & mydata$rfrsttn_ch==0] <- 'na'
mydata$edctn_n=as.numeric(mydata$edctn_n)
mydata$edctn_n=ifelse(is.na(mydata$edctn_n), mean(mydata$edctn_n,na.rm=T), mydata$edctn_n)
####SECONDARY EDUCATION#####
mydata$edctn_s[mydata$edctn_s>6.1 & mydata$rfrsttn_ch==1] <- 'na'
mydata$edctn_s=as.numeric(mydata$edctn_s)
mydata$edctn_s=ifelse(is.na(mydata$edctn_s), mean(mydata$edctn_s,na.rm=T), mydata$edctn_s)
mydata$edctn_s[mydata$edctn_s<2.5 & mydata$rfrsttn_ch==1] <- 'na'
mydata$edctn_s=as.numeric(mydata$edctn_s)
mydata$edctn_s=ifelse(is.na(mydata$edctn_s), mean(mydata$edctn_s,na.rm=T), mydata$edctn_s)
mydata$edctn_s[mydata$edctn_s>6.6 & mydata$rfrsttn_ch==0] <- 'na'
mydata$edctn_s=as.numeric(mydata$edctn_s)
mydata$edctn_s=ifelse(is.na(mydata$edctn_s), mean(mydata$edctn_s,na.rm=T), mydata$edctn_s)
mydata$edctn_s[mydata$edctn_s<2 & mydata$rfrsttn_ch==0] <- 'na'
mydata$edctn_s=as.numeric(mydata$edctn_s)
mydata$edctn_s=ifelse(is.na(mydata$edctn_s), mean(mydata$edctn_s,na.rm=T), mydata$edctn_s)
####HIGHER EDUCATION####
mydata$edctn_h[mydata$edctn_h>11 & mydata$rfrsttn_ch==1] <- 'na'
mydata$edctn_h=as.numeric(mydata$edctn_h)
mydata$edctn_h=ifelse(is.na(mydata$edctn_h), mean(mydata$edctn_h,na.rm=T), mydata$edctn_h)
mydata$edctn_h[mydata$edctn_h<0.4 & mydata$rfrsttn_ch==1] <- 'na'
mydata$edctn_h=as.numeric(mydata$edctn_h)
mydata$edctn_h=ifelse(is.na(mydata$edctn_h), mean(mydata$edctn_h,na.rm=T), mydata$edctn_h)
mydata$edctn_h[mydata$edctn_h>15 & mydata$rfrsttn_ch==0] <- 'na'
mydata$edctn_h=as.numeric(mydata$edctn_h)
mydata$edctn_h=ifelse(is.na(mydata$edctn_h), mean(mydata$edctn_h,na.rm=T), mydata$edctn_h)
mydata$edctn_h[mydata$edctn_h<0.4 & mydata$rfrsttn_ch==0] <- 'na'
mydata$edctn_h=as.numeric(mydata$edctn_h)
mydata$edctn_h=ifelse(is.na(mydata$edctn_h), mean(mydata$edctn_h,na.rm=T), mydata$edctn_h)
####ILLITERACY####
mydata$illtrcy[mydata$illtrcy>34 & mydata$rfrsttn_ch==1] <- 'na'
mydata$illtrcy=as.numeric(mydata$illtrcy)
mydata$illtrcy=ifelse(is.na(mydata$illtrcy), mean(mydata$illtrcy,na.rm=T), mydata$illtrcy)
mydata$illtrcy[mydata$illtrcy<2 & mydata$rfrsttn_ch==1] <- 'na'
mydata$illtrcy=as.numeric(mydata$illtrcy)
mydata$illtrcy=ifelse(is.na(mydata$illtrcy), mean(mydata$illtrcy,na.rm=T), mydata$illtrcy)
mydata$illtrcy[mydata$illtrcy>40 & mydata$rfrsttn_ch==0] <- 'na'
mydata$illtrcy=as.numeric(mydata$illtrcy)
mydata$illtrcy=ifelse(is.na(mydata$illtrcy), mean(mydata$illtrcy,na.rm=T), mydata$illtrcy)
mydata$illtrcy[mydata$illtrcy<3 & mydata$rfrsttn_ch==0] <- 'na'
mydata$illtrcy=as.numeric(mydata$illtrcy)
mydata$illtrcy=ifelse(is.na(mydata$illtrcy), mean(mydata$illtrcy,na.rm=T), mydata$illtrcy)
####PROPERTY DENSITY###
mydata$dnsty_pr[mydata$dnsty_pr>0.60 & mydata$rfrsttn_ch==1] <- 'na'
mydata$dnsty_pr=as.numeric(mydata$dnsty_pr)
mydata$dnsty_pr=ifelse(is.na(mydata$dnsty_pr), mean(mydata$dnsty_pr,na.rm=T), mydata$dnsty_pr)
mydata$dnsty_pr[mydata$dnsty_pr<0 & mydata$rfrsttn_ch==1] <- 'na'
mydata$dnsty_pr=as.numeric(mydata$dnsty_pr)
mydata$dnsty_pr=ifelse(is.na(mydata$dnsty_pr), mean(mydata$dnsty_pr,na.rm=T), mydata$dnsty_pr)
mydata$dnsty_pr[mydata$dnsty_pr>1.5 & mydata$rfrsttn_ch==0] <- 'na'
mydata$dnsty_pr=as.numeric(mydata$dnsty_pr)
mydata$dnsty_pr=ifelse(is.na(mydata$dnsty_pr), mean(mydata$dnsty_pr,na.rm=T), mydata$dnsty_pr)
mydata$dnsty_pr[mydata$dnsty_pr<0 & mydata$rfrsttn_ch==0] <- 'na'
mydata$dnsty_pr=as.numeric(mydata$dnsty_pr)
mydata$dnsty_pr=ifelse(is.na(mydata$dnsty_pr), mean(mydata$dnsty_pr,na.rm=T), mydata$dnsty_pr)
###POPULATION DENSITY####
mydata$dnsty_pp[mydata$dnsty_pp>1.9 & mydata$rfrsttn_ch==1] <- 'na'
mydata$dnsty_pp=as.numeric(mydata$dnsty_pp)
mydata$dnsty_pp=ifelse(is.na(mydata$dnsty_pp), mean(mydata$dnsty_pp,na.rm=T), mydata$dnsty_pp)
mydata$dnsty_pp[mydata$dnsty_pp<0 & mydata$rfrsttn_ch==1] <- 'na'
mydata$dnsty_pp=as.numeric(mydata$dnsty_pp)
mydata$dnsty_pp=ifelse(is.na(mydata$dnsty_pp), mean(mydata$dnsty_pp,na.rm=T), mydata$dnsty_pp)
mydata$dnsty_pp[mydata$dnsty_pp>4.8 & mydata$rfrsttn_ch==0] <- 'na'
mydata$dnsty_pp=as.numeric(mydata$dnsty_pp)
mydata$dnsty_pp=ifelse(is.na(mydata$dnsty_pp), mean(mydata$dnsty_pp,na.rm=T), mydata$dnsty_pp)
mydata$dnsty_pp[mydata$dnsty_pp<0 & mydata$rfrsttn_ch==0] <- 'na'
mydata$dnsty_pp=as.numeric(mydata$dnsty_pp)
mydata$dnsty_pp=ifelse(is.na(mydata$dnsty_pp), mean(mydata$dnsty_pp,na.rm=T), mydata$dnsty_pp)
###AGROFORESTRY###
mydata$agrfrst[mydata$agrfrst>41 & mydata$rfrsttn_ch==1] <- 'na'
mydata$agrfrst=as.numeric(mydata$agrfrst)
mydata$agrfrst=ifelse(is.na(mydata$agrfrst), mean(mydata$agrfrst,na.rm=T), mydata$agrfrst)
mydata$agrfrst[mydata$agrfrst<0 & mydata$rfrsttn_ch==1] <- 'na'
mydata$agrfrst=as.numeric(mydata$agrfrst)
mydata$agrfrst=ifelse(is.na(mydata$agrfrst), mean(mydata$agrfrst,na.rm=T), mydata$agrfrst)
mydata$agrfrst[mydata$agrfrst>54 & mydata$rfrsttn_ch==0] <- 'na'
mydata$agrfrst=as.numeric(mydata$agrfrst)
mydata$agrfrst=ifelse(is.na(mydata$agrfrst), mean(mydata$agrfrst,na.rm=T), mydata$agrfrst)
mydata$agrfrst[mydata$agrfrst<0 & mydata$rfrsttn_ch==0] <- 'na'
mydata$agrfrst=as.numeric(mydata$agrfrst)
mydata$agrfrst=ifelse(is.na(mydata$agrfrst), mean(mydata$agrfrst,na.rm=T), mydata$agrfrst)
#####RURAL INCOME#####
mydata$incm_rrPLO[mydata$incm_rrPLO>1100 & mydata$rfrsttn_ch==1] <- 'na'
mydata$incm_rrPLO=as.numeric(mydata$incm_rrPLO)
mydata$incm_rrPLO=ifelse(is.na(mydata$incm_rrPLO), mean(mydata$incm_rrPLO,na.rm=T), mydata$incm_rrPLO)
mydata$incm_rrPLO[mydata$incm_rrPLO<10 & mydata$rfrsttn_ch==1] <- 'na'
mydata$incm_rrPLO=as.numeric(mydata$incm_rrPLO)
mydata$incm_rrPLO=ifelse(is.na(mydata$incm_rrPLO), mean(mydata$incm_rrPLO,na.rm=T), mydata$incm_rrPLO)
mydata$incm_rrPLO[mydata$incm_rrPLO>1500 & mydata$rfrsttn_ch==0] <- 'na'
mydata$incm_rrPLO=as.numeric(mydata$incm_rrPLO)
mydata$incm_rrPLO=ifelse(is.na(mydata$incm_rrPLO), mean(mydata$incm_rrPLO,na.rm=T), mydata$incm_rrPLO)
mydata$incm_rrPLO[mydata$incm_rrPLO<100 & mydata$rfrsttn_ch==0] <- 'na'
mydata$incm_rrPLO=as.numeric(mydata$incm_rrPLO)
mydata$incm_rrPLO=ifelse(is.na(mydata$incm_rrPLO), mean(mydata$incm_rrPLO,na.rm=T), mydata$incm_rrPLO)
####URBAN INCOME####
mydata$incm_rbPLO[mydata$incm_rbPLO>1350 & mydata$rfrsttn_ch==1] <- 'na'
mydata$incm_rbPLO=as.numeric(mydata$incm_rbPLO)
mydata$incm_rbPLO=ifelse(is.na(mydata$incm_rbPLO), mean(mydata$incm_rbPLO,na.rm=T), mydata$incm_rbPLO)
mydata$incm_rbPLO[mydata$incm_rbPLO<0 & mydata$rfrsttn_ch==1] <- 'na'
mydata$incm_rbPLO=as.numeric(mydata$incm_rbPLO)
mydata$incm_rbPLO=ifelse(is.na(mydata$incm_rbPLO), mean(mydata$incm_rbPLO,na.rm=T), mydata$incm_rbPLO)
mydata$incm_rbPLO[mydata$incm_rbPLO>1400 & mydata$rfrsttn_ch==0] <- 'na'
mydata$incm_rbPLO=as.numeric(mydata$incm_rbPLO)
mydata$incm_rbPLO=ifelse(is.na(mydata$incm_rbPLO), mean(mydata$incm_rbPLO,na.rm=T), mydata$incm_rbPLO)
mydata$incm_rbPLO[mydata$incm_rbPLO<0 & mydata$rfrsttn_ch==0] <- 'na'
mydata$incm_rbPLO=as.numeric(mydata$incm_rbPLO)
mydata$incm_rbPLO=ifelse(is.na(mydata$incm_rbPLO), mean(mydata$incm_rbPLO,na.rm=T), mydata$incm_rbPLO)
###MEDIAN INCOME####
mydata$incm_mPLO[mydata$incm_mPLO>900 & mydata$rfrsttn_ch==1] <- 'na'
mydata$incm_mPLO=as.numeric(mydata$incm_mPLO)
mydata$incm_mPLO=ifelse(is.na(mydata$incm_mPLO), mean(mydata$incm_mPLO,na.rm=T), mydata$incm_mPLO)
mydata$incm_mPLO[mydata$incm_mPLO<0 & mydata$rfrsttn_ch==1] <- 'na'
mydata$incm_mPLO=as.numeric(mydata$incm_mPLO)
mydata$incm_mPLO=ifelse(is.na(mydata$incm_mPLO), mean(mydata$incm_mPLO,na.rm=T), mydata$incm_mPLO)
mydata$incm_mPLO[mydata$incm_mPLO>950 & mydata$rfrsttn_ch==0] <- 'na'
mydata$incm_mPLO=as.numeric(mydata$incm_mPLO)
mydata$incm_mPLO=ifelse(is.na(mydata$incm_mPLO), mean(mydata$incm_mPLO,na.rm=T), mydata$incm_mPLO)
mydata$incm_mPLO[mydata$incm_mPLO<0 & mydata$rfrsttn_ch==0] <- 'na'
mydata$incm_mPLO=as.numeric(mydata$incm_mPLO)
mydata$incm_mPLO=ifelse(is.na(mydata$incm_mPLO), mean(mydata$incm_mPLO,na.rm=T), mydata$incm_mPLO)
####BELOW MIN WAGE INCOME####
mydata$incm_b_[mydata$incm_b_>46 & mydata$rfrsttn_ch==1] <- 'na'
mydata$incm_b_=as.numeric(mydata$incm_b_)
mydata$incm_b_=ifelse(is.na(mydata$incm_b_), mean(mydata$incm_b_,na.rm=T), mydata$incm_b_)
mydata$incm_b_[mydata$incm_b_<11 & mydata$rfrsttn_ch==1] <- 'na'
mydata$incm_b_=as.numeric(mydata$incm_b_)
mydata$incm_b_=ifelse(is.na(mydata$incm_b_), mean(mydata$incm_b_,na.rm=T), mydata$incm_b_)
mydata$incm_b_[mydata$incm_b_>48 & mydata$rfrsttn_ch==0] <- 'na'
mydata$incm_b_=as.numeric(mydata$incm_b_)
mydata$incm_b_=ifelse(is.na(mydata$incm_b_), mean(mydata$incm_b_,na.rm=T), mydata$incm_b_)
mydata$incm_b_[mydata$incm_b_<9 & mydata$rfrsttn_ch==0] <- 'na'
mydata$incm_b_=as.numeric(mydata$incm_b_)
mydata$incm_b_=ifelse(is.na(mydata$incm_b_), mean(mydata$incm_b_,na.rm=T), mydata$incm_b_)
####NO INCOME####
mydata$incm_nn[mydata$incm_nn>40 & mydata$rfrsttn_ch==1] <- 'na'
mydata$incm_nn=as.numeric(mydata$incm_nn)
mydata$incm_nn=ifelse(is.na(mydata$incm_nn), mean(mydata$incm_nn,na.rm=T), mydata$incm_nn)
mydata$incm_nn[mydata$incm_nn<13.5 & mydata$rfrsttn_ch==1] <- 'na'
mydata$incm_nn=as.numeric(mydata$incm_nn)
mydata$incm_nn=ifelse(is.na(mydata$incm_nn), mean(mydata$incm_nn,na.rm=T), mydata$incm_nn)
mydata$incm_nn[mydata$incm_nn>42 & mydata$rfrsttn_ch==0] <- 'na'
mydata$incm_nn=as.numeric(mydata$incm_nn)
mydata$incm_nn=ifelse(is.na(mydata$incm_nn), mean(mydata$incm_nn,na.rm=T), mydata$incm_nn)
mydata$incm_nn[mydata$incm_nn<9.5 & mydata$rfrsttn_ch==0] <- 'na'
mydata$incm_nn=as.numeric(mydata$incm_nn)
mydata$incm_nn=ifelse(is.na(mydata$incm_nn), mean(mydata$incm_nn,na.rm=T), mydata$incm_nn)
#################################
####### 3. STANDARDISING ########
#################################
#Use mydata to  standardize  the variables for the model (using scale function) because INLA deals better with scale
#quantities
mydata$edctn_n_sc=scale(mydata$edctn_n) #myshp@data$edctn_n_sc=scale(myshp@data$edctn_n)
#Scaling removes the general mean from each observation and divides by standard deviation to bring the new general mean to 0 and new standard deviation close to 1, or at least much smaller.
#The range of values is scaled to a narrower range
summary(mydata$edctn_n_sc)
#?scale #gives more information on how it works and even gives an example at the bottom
mydata$edctn_n_sc=scale(mydata$edctn_n)
mydata$edctn_nPLO_sc=scale(mydata$edctn_nPLO)
mydata$edctn_s_sc=scale(mydata$edctn_s)
mydata$edctn_sPLO_sc=scale(mydata$edctn_sPLO)
mydata$edctn_h_sc=scale(mydata$edctn_h)
mydata$edctn_hPLO_sc=scale(mydata$edctn_hPLO)
mydata$illtrcy_sc=scale(mydata$illtrcy)
mydata$illtPLO_sc=scale(mydata$illtPLO)
mydata$dnsty_r_sc=scale(mydata$dnsty_r)
mydata$dnsty_pr_sc=scale(mydata$dnsty_pr)
mydata$dnsty_pp_sc=scale(mydata$dnsty_pp)
mydata$agrfrst_sc=scale(mydata$agrfrst)
mydata$agrfPLO_sc=scale(mydata$agrfPLO)
mydata$incm_rrPLO_sc=scale(mydata$incm_rrPLO)
mydata$incm_rbPLO_sc=scale(mydata$incm_rbPLO)
mydata$incm_mPLO_sc=scale(mydata$incm_mPLO)
mydata$incm_b__sc=scale(mydata$incm_b_)
mydata$in__PLO_sc=scale(mydata$in__PLO)
mydata$incm_nn_sc=scale(mydata$incm_nn)
mydata$incm_nPLO_sc=scale(mydata$incm_nPLO)
mydata$avg_incm = (mydata$incm_rrPLO + mydata$incm_rbPLO)/2
###########################################################
#Chunk:   SPLITTING SCALED VARIABLES INTO QUANTILES########
###########################################################
#mydata$agrfrst_sc=as.numeric(mydata$agrfrst_sc)
#mydata$agrfrst1=ifelse(is.na(mydata$agrfrst_sc), mean(mydata$agrfrst_sc,na.rm=T), mydata$agrfrst_sc)
#mydata$edctn_n_cat=cut(mydata$edctn_n_sc, breaks=c(quantile(mydata$edctn_n_sc,
#                                                           probs = seq(0, 1, by = 0.25))))
#mydata$edctn_s_cat=cut(mydata$edctn_s_sc, breaks=c(quantile(mydata$edctn_s_sc,
#                                                          probs = seq(0, 1, by = 0.25))))
#mydata$edctn_h_cat=cut(mydata$edctn_h_sc, breaks=c(quantile(mydata$edctn_h_sc,
#                                                           probs = seq(0, 1, by = 0.25))))
#mydata$illtrcy_cat=cut(mydata$illtrcy_sc, breaks=c(quantile(mydata$illtrcy_sc,
#                                                           probs = seq(0, 1, by = 0.25))))
#mydata$dnsty_pr_cat=cut(mydata$dnsty_pr_sc, breaks=c(quantile(mydata$dnsty_pr_sc,
#                                                              probs = seq(0, 1, by = 0.25))))
#mydata$dnsty_pp_cat=cut(mydata$dnsty_pp_sc, breaks=c(quantile(mydata$dnsty_pp_sc,
#                                                             probs = seq(0, 1, by = 0.25))))
#mydata$agrfrst_cat=cut(mydata$agrfrst_sc, breaks=c(quantile(mydata$agrfrst_sc,
#                                                           probs = seq(0, 1, by = 0.25))))
#mydata$incm_rrPLO_cat=cut(mydata$incm_rrPLO_sc, breaks=c(quantile(mydata$incm_rrPLO_sc,
#                                                                 probs = seq(0, 1, by = 0.25))))
#mydata$incm_rbPLO_cat=cut(mydata$incm_rbPLO_sc, breaks=c(quantile(mydata$incm_rbPLO_sc,
#                                                                 probs = seq(0, 1, by = 0.25))))
#mydata$incm_mPLO_cat=cut(mydata$incm_mPLO_sc, breaks=c(quantile(mydata$incm_mPLO_sc,
#                                                               probs = seq(0, 1, by = 0.25))))
#mydata$incm_b__cat=cut(mydata$incm_b__sc, breaks=c(quantile(mydata$incm_b__sc,
#                                                           probs = seq(0, 1, by = 0.25))))
#mydata$incm_nn_cat=cut(mydata$incm_nn_sc, breaks=c(quantile(mydata$incm_nn_sc,
#                                                           probs = seq(0, 1, by = 0.25))))
mydata$avg_incm_cat = cut(mydata$avg_incm, breaks=c(quantile(mydata$avg_incm,
probs = seq(0, 1, by = 0.33333333333))))
mydata$edctn_s_cat=cut(mydata$edctn_s, breaks=c(quantile(mydata$edctn_s,
probs = seq(0, 1, by = 0.33333333333))))
mydata$dnsty_pp_cat=cut(mydata$dnsty_pp, breaks=c(quantile(mydata$dnsty_pp,
probs = seq(0, 1, by = 0.25))))
mydata$dnsty_pp_cat = cut(mydata$dnsty_pp, breaks=c(0,0.3,0.6,5))
summary(mydata$dnsty_pp_cat)
library(cowplot)
install.packages(cowplot)
install.packages('cowplot')
library(cowplot)
theme_set(theme_cowplot())
## now we can plot the data
predicted.data <- data.frame(
probability.of.rfrsttn_ch=logistic$fitted.values,
rfrsttn_ch=mydata$rfrsttn_ch)
logistic <- glm(rfrsttn_ch ~ edctn_n + edctn_s + edctn_h +
dnsty_pp + agrfrst + incm_rrPLO + incm_rbPLO +
incm_b_ + incm_nn, data=mydata, family="binomial")
summary(logistic)
## Now calculate the overall "Pseudo R-squared" and its p-value
ll.null <- logistic$null.deviance/-2
ll.proposed <- logistic$deviance/-2
## McFadden's Pseudo R^2 = [ LL(Null) - LL(Proposed) ] / LL(Null)
(ll.null - ll.proposed) / ll.null
## The p-value for the R^2
1 - pchisq(2*(ll.proposed - ll.null), df=(length(logistic$coefficients)-1))
library(ggplot2)
library(cowplot)
theme_set(theme_cowplot())
## now we can plot the data
predicted.data <- data.frame(
probability.of.rfrsttn_ch=logistic$fitted.values,
rfrsttn_ch=mydata$rfrsttn_ch)
predicted.data <- predicted.data[
order(predicted.data$probability.of.rfrsttn_ch, decreasing=FALSE),]
## Lastly, we can plot the predicted probabilities for each sample having
## heart disease and color by whether or not they actually had heart disease
ggplot(data=predicted.data, aes(x=rank, y=probability.of.hd)) +
geom_point(aes(color=hd), alpha=1, shape=4, stroke=2) +
xlab("Index") +
ylab("Predicted probability of getting heart disease")
## Lastly, we can plot the predicted probabilities for each sample having
## heart disease and color by whether or not they actually had heart disease
ggplot(data=predicted.data, aes(x=rank, y=probability.of.hd)) +
geom_point(aes(color=rfrsttn_ch), alpha=1, shape=4, stroke=2) +
xlab("Index") +
ylab("Predicted probability of getting heart disease")
## Lastly, we can plot the predicted probabilities for each sample having
## heart disease and color by whether or not they actually had heart disease
ggplot(data=predicted.data, aes(x=rank, y=probability.of.rfrsttn_ch)) +
geom_point(aes(color=rfrsttn_ch), alpha=1, shape=4, stroke=2) +
xlab("Index") +
ylab("Predicted probability of getting heart disease")
## Lastly, we can plot the predicted probabilities for each sample having
## heart disease and color by whether or not they actually had heart disease
ggplot(data=predicted.data, aes(x=, y=probability.of.rfrsttn_ch)) +
geom_point(aes(color=rfrsttn_ch), alpha=1, shape=4, stroke=2) +
xlab("Index") +
ylab("Predicted probability of getting heart disease")
## Lastly, we can plot the predicted probabilities for each sample having
## heart disease and color by whether or not they actually had heart disease
ggplot(data=predicted.data, aes(x=abbrv_s, y=probability.of.rfrsttn_ch)) +
geom_point(aes(color=rfrsttn_ch), alpha=1, shape=4, stroke=2) +
xlab("Index") +
ylab("Predicted probability of getting heart disease")
## Lastly, we can plot the predicted probabilities for each sample having
## heart disease and color by whether or not they actually had heart disease
ggplot(data=mydata, aes(x=abbrv_s, y=probability.of.rfrsttn_ch)) +
geom_point(aes(color=rfrsttn_ch), alpha=1, shape=4, stroke=2) +
xlab("Index") +
ylab("Predicted probability of getting heart disease")
## now we can plot the data
predicted.data <- data.frame(
probability.of.rfrsttn_ch=logistic$fitted.values,
rfrsttn_ch=mydata$rfrsttn_ch)
predicted.data <- predicted.data[
order(predicted.data$probability.of.rfrsttn_ch, decreasing=FALSE),]
predicted.data$rank <- 1:nrow(predicted.data)
## Lastly, we can plot the predicted probabilities for each sample having
## heart disease and color by whether or not they actually had heart disease
ggplot(data=mydata, aes(x=abbrv_s, y=probability.of.rfrsttn_ch)) +
geom_point(aes(color=rfrsttn_ch), alpha=1, shape=4, stroke=2) +
xlab("Index") +
ylab("Predicted probability of getting heart disease")
mydata$probability.of.rfrsttn_ch=probability.of.rfrsttn_ch
View(predicted.data)
## Lastly, we can plot the predicted probabilities for each sample having
## heart disease and color by whether or not they actually had heart disease
ggplot(data=predicted.data, aes(x=rank, y=probability.of.rfrsttn_ch)) +
geom_point(aes(color=rfrsttn_ch), alpha=1, shape=4, stroke=2) +
xlab("Index") +
ylab("Predicted probability of getting heart disease")
## Lastly, we can plot the predicted probabilities for each sample having
## heart disease and color by whether or not they actually had heart disease
ggplot(data=predicted.data, aes(x=rank, y=probability.of.rfrsttn_ch)) +
geom_point(aes(color=rfrsttn_ch), alpha=1, shape=4, stroke=2) +
xlab("Municipalities") +
ylab("Predicted probability of reforestation occuring")
logistic <- glm(rfrsttn_ch ~ incm_rrPLO, data=mydata, family="binomial")
summary(logistic)
## Now calculate the overall "Pseudo R-squared" and its p-value
ll.null <- logistic$null.deviance/-2
ll.proposed <- logistic$deviance/-2
## McFadden's Pseudo R^2 = [ LL(Null) - LL(Proposed) ] / LL(Null)
(ll.null - ll.proposed) / ll.null
## The p-value for the R^2
1 - pchisq(2*(ll.proposed - ll.null), df=(length(logistic$coefficients)-1))
## now we can plot the data
predicted.data <- data.frame(probability.of.rfrsttn_ch=logistic$fitted.values, rfrsttn_ch=mydata$rfrsttn_ch)
View(predicted.data)
predicted.data <- predicted.data[
order(predicted.data$probability.of.rfrsttn_ch, decreasing=FALSE),]
predicted.data$rank <- 1:nrow(predicted.data)
## Lastly, we can plot the predicted probabilities for each sample having
## heart disease and color by whether or not they actually had heart disease
ggplot(data=predicted.data, aes(x=rank, y=probability.of.rfrsttn_ch)) +
geom_point(aes(color=rfrsttn_ch), alpha=1, shape=4, stroke=2) +
xlab("Municipalities") +
ylab("Predicted probability of reforestation occuring")
logistic <- glm(rfrsttn_ch ~ incm_rbPLO, data=mydata, family="binomial")
summary(logistic)
## Now calculate the overall "Pseudo R-squared" and its p-value
ll.null <- logistic$null.deviance/-2
ll.proposed <- logistic$deviance/-2
## McFadden's Pseudo R^2 = [ LL(Null) - LL(Proposed) ] / LL(Null)
(ll.null - ll.proposed) / ll.null
## The p-value for the R^2
1 - pchisq(2*(ll.proposed - ll.null), df=(length(logistic$coefficients)-1))
library(ggplot2)
library(cowplot)
theme_set(theme_cowplot())
## now we can plot the data
predicted.data <- data.frame(probability.of.rfrsttn_ch=logistic$fitted.values, rfrsttn_ch=mydata$rfrsttn_ch)
predicted.data <- predicted.data[
order(predicted.data$probability.of.rfrsttn_ch, decreasing=FALSE),]
predicted.data$rank <- 1:nrow(predicted.data)
## Lastly, we can plot the predicted probabilities for each sample having
## heart disease and color by whether or not they actually had heart disease
ggplot(data=predicted.data, aes(x=rank, y=probability.of.rfrsttn_ch)) +
geom_point(aes(color=rfrsttn_ch), alpha=1, shape=4, stroke=2) +
xlab("Municipalities") +
ylab("Predicted probability of reforestation occuring")
#ggsave("heart_disease_probabilities.pdf")
#####################################
##
## Now we will use all of the data available to predict heart disease
##
#####################################
logistic <- glm(rfrsttn_ch ~ edctn_n + edctn_s + edctn_h +
dnsty_pp + agrfrst + incm_rrPLO + incm_rbPLO +
incm_b_ + incm_nn, data=mydata, family="binomial")
summary(logistic)
## Now calculate the overall "Pseudo R-squared" and its p-value
ll.null <- logistic$null.deviance/-2
ll.proposed <- logistic$deviance/-2
## McFadden's Pseudo R^2 = [ LL(Null) - LL(Proposed) ] / LL(Null)
(ll.null - ll.proposed) / ll.null
## The p-value for the R^2
1 - pchisq(2*(ll.proposed - ll.null), df=(length(logistic$coefficients)-1))
library(ggplot2)
library(cowplot)
theme_set(theme_cowplot())
## now we can plot the data
predicted.data <- data.frame(probability.of.rfrsttn_ch=logistic$fitted.values, rfrsttn_ch=mydata$rfrsttn_ch)
View(predicted.data)
predicted.data <- predicted.data[
order(predicted.data$probability.of.rfrsttn_ch, decreasing=FALSE),]
predicted.data$rank <- 1:nrow(predicted.data)
## Lastly, we can plot the predicted probabilities for each sample having
## heart disease and color by whether or not they actually had heart disease
ggplot(data=predicted.data, aes(x=rank, y=probability.of.rfrsttn_ch)) +
geom_point(aes(color=rfrsttn_ch), alpha=1, shape=4, stroke=2) +
xlab("Municipalities") +
ylab("Predicted probability of reforestation")
#ggsave("heart_disease_probabilities.pdf")
logistic <- glm(rfrsttn_ch ~ incm_rrPLO + incm_rbPLO, data=mydata, family="binomial")
summary(logistic)
## Now calculate the overall "Pseudo R-squared" and its p-value
ll.null <- logistic$null.deviance/-2
ll.proposed <- logistic$deviance/-2
## McFadden's Pseudo R^2 = [ LL(Null) - LL(Proposed) ] / LL(Null)
(ll.null - ll.proposed) / ll.null
## The p-value for the R^2
1 - pchisq(2*(ll.proposed - ll.null), df=(length(logistic$coefficients)-1))
library(ggplot2)
library(cowplot)
theme_set(theme_cowplot())
## now we can plot the data
predicted.data <- data.frame(probability.of.rfrsttn_ch=logistic$fitted.values, rfrsttn_ch=mydata$rfrsttn_ch)
#View(predicted.data)
predicted.data <- predicted.data[
order(predicted.data$probability.of.rfrsttn_ch, decreasing=FALSE),]
predicted.data$rank <- 1:nrow(predicted.data)
## Lastly, we can plot the predicted probabilities for each sample having
## heart disease and color by whether or not they actually had heart disease
ggplot(data=predicted.data, aes(x=rank, y=probability.of.rfrsttn_ch)) +
geom_point(aes(color=rfrsttn_ch), alpha=1, shape=4, stroke=2) +
xlab("Municipalities") +
ylab("Predicted probability of reforestation")
logistic <- glm(rfrsttn_ch ~ edctn_n + edctn_s + edctn_h +
dnsty_pp + agrfrst + incm_rrPLO + incm_rbPLO +
incm_b_ + incm_nn, data=mydata, family="binomial")
summary(logistic)
round(coef(summary(p1)), 4)
round(coef(summary(logistic)), 4)
table <- summary(logistic)
View(table)
View(table$aliased)
View(table$family)
table <- round(coef(summary(logistic)), 4)
View(table)
#bym2-9Vars
formula.bym29 = rfrsttn_ch ~ 1 + edctn_n_sc + edctn_s_sc + edctn_h_sc +
dnsty_pp_sc + agrfrst_sc + incm_rrPLO_sc + incm_rbPLO_sc +
incm_b__sc + incm_nn_sc + f(ID, model='bym2', scale.model=TRUE, graph='Brazil.graph', adjust.for.con.comp=TRUE)
result.bym29= inla(formula.bym29,
family='binomial', # based on the distribution of your outcome, it could be 'poisson' 'binomial' or 'zero inflated poisson'
# if the outcome is  a rate (then the total lnd pr should be  accounted )
data=mydata, # myshp@data
control.predictor = list(compute=TRUE),
control.compute = list(dic = TRUE, waic = TRUE, cpo = TRUE))
summary(result.bym29)
#bym5Vars
formula.bym25 = rfrsttn_ch ~ 1 + edctn_n_sc +
dnsty_pp_sc + agrfrst_sc + incm_rrPLO_sc + incm_rbPLO_sc +
f(ID, model='bym2', scale.model=TRUE, graph='Brazil.graph', adjust.for.con.comp=TRUE)
result.bym25= inla(formula.bym25,
family='binomial', # based on the distribution of your outcome, it could be 'poisson' 'binomial' or 'zero inflated poisson'
# if the outcome is  a rate (then the total lnd pr should be  accounted )
data=mydata, # myshp@data
control.predictor = list(compute=TRUE),
control.compute = list(dic = TRUE, waic = TRUE, cpo = TRUE))
summary(result.bym25)
#iid9Vars
formula.iid9 = rfrsttn_ch ~ 1 + edctn_n_sc + edctn_s_sc + edctn_h_sc +
dnsty_pp_sc + agrfrst_sc + incm_rrPLO_sc + incm_rbPLO_sc +
incm_b__sc + incm_nn_sc + f(ID, model='iid',
graph='Brazil.graph', adjust.for.con.comp=TRUE)
result.iid9= inla(formula.iid9, family='binomial',
data=mydata,
control.compute = list(dic = TRUE, waic = TRUE, cpo = TRUE))
summary(result.iid9)
#iid5Vars
formula2 = rfrsttn_ch ~ 1 + edctn_n_sc +
dnsty_pp_sc + agrfrst_sc + incm_rrPLO_sc + incm_rbPLO_sc +
f(ID, model='bym', scale.model=TRUE, graph='Brazil.graph', adjust.for.con.comp=TRUE)
result2= inla(formula2, family='binomial',
data=mydata,
control.compute = list(dic = TRUE, waic = TRUE, cpo = TRUE))
summary(result2)
#INLA (bym)
#bym9Vars
formula2.5 = rfrsttn_ch ~ 1 + edctn_n_sc + edctn_s_sc + edctn_h_sc +
dnsty_pp_sc + agrfrst_sc + incm_rrPLO_sc + incm_rbPLO_sc +
incm_b__sc + incm_nn_sc + f(ID, model='bym', scale.model=TRUE, graph='Brazil.graph', adjust.for.con.comp=TRUE)
result2.5= inla(formula2.5,
family='binomial', # based on the distribution of your outcome, it could be 'poisson' 'binomial' or 'zero inflated poisson'
# if the outcome is  a rate (then the total lnd pr should be  accounted )
data=mydata, # myshp@data
control.predictor = list(compute=TRUE),
control.compute = list(dic = TRUE, waic = TRUE, cpo = TRUE))
summary(result2.5)
#bym5Vars
formula3 = rfrsttn_ch ~ 1 + edctn_n_sc +
dnsty_pp_sc + agrfrst_sc + incm_rrPLO_sc + incm_rbPLO_sc +
f(ID, model='bym', scale.model=TRUE, graph='Brazil.graph', adjust.for.con.comp=TRUE)
result3= inla(formula3,
family='binomial', # based on the distribution of your outcome, it could be 'poisson' 'binomial' or 'zero inflated poisson'
# if the outcome is  a rate (then the total lnd pr should be  accounted )
data=mydata, # myshp@data
control.predictor = list(compute=TRUE),
control.compute = list(dic = TRUE, waic = TRUE, cpo = TRUE))
summary(result3)
library(INLA)
plot_inla_residuals(result3)
#car9Vars
formula.car9 = rfrsttn_ch ~ 1 + edctn_n_sc + edctn_s_sc + edctn_h_sc +
dnsty_pp_sc + agrfrst_sc + incm_rrPLO_sc + incm_rbPLO_sc +
incm_b__sc + incm_nn_sc + f(ID, model='bym2', scale.model=TRUE, graph='Brazil.graph', adjust.for.con.comp=TRUE)
result.car9= inla(formula.car9,
family='binomial', # based on the distribution of your outcome, it could be 'poisson' 'binomial' or 'zero inflated poisson'
# if the outcome is  a rate (then the total lnd pr should be  accounted )
data=mydata, # myshp@data
control.predictor = list(compute=TRUE),
control.compute = list(dic = TRUE, waic = TRUE, cpo = TRUE))
summary(result.car9)
#car9Vars
formula.car9 = rfrsttn_ch ~ 1 + edctn_n_sc + edctn_s_sc + edctn_h_sc +
dnsty_pp_sc + agrfrst_sc + incm_rrPLO_sc + incm_rbPLO_sc +
incm_b__sc + incm_nn_sc + f(ID, model='car', scale.model=TRUE, graph='Brazil.graph', adjust.for.con.comp=TRUE)
result.car9= inla(formula.car9,
family='binomial', # based on the distribution of your outcome, it could be 'poisson' 'binomial' or 'zero inflated poisson'
# if the outcome is  a rate (then the total lnd pr should be  accounted )
data=mydata, # myshp@data
control.predictor = list(compute=TRUE),
control.compute = list(dic = TRUE, waic = TRUE, cpo = TRUE))
